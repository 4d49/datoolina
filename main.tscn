[gd_scene load_steps=2 format=3 uid="uid://bw2ejrh206k2k"]

[sub_resource type="GDScript" id="GDScript_xjt66"]
script/source = "# Copyright (c) 2024 Mansur Isaev and contributors - MIT License
# See `LICENSE.md` included in the source distribution for details.

extends PanelContainer


const DB: GDScript = preload(\"res://scripts/database.gd\")

const AboutProgramDialog: GDScript = preload(\"res://scripts/about_program_dialog.gd\")
const DatabaseCreateDialog: GDScript = preload(\"res://scripts/database_create_dialog.gd\")
const DatabaseEditor: GDScript = preload(\"res://scripts/database_editor.gd\")
const DatabaseLoadDialog: GDScript = preload(\"res://scripts/database_load_dialog.gd\")
const DatabaseSaver: GDScript = preload(\"res://scripts/database_saver.gd\")
const DatabaseSaveDialog: GDScript = preload(\"res://scripts/database_save_dialog.gd\")
const DatabaseExportDialog: GDScript = preload(\"res://scripts/database_export_dialog.gd\")
const QuitDialog: GDScript = preload(\"res://scripts/quit_dialog.gd\")


signal database_saved
signal database_changed(database: Dictionary[StringName, Variant])


enum FileMenu {
	NEW_FILE,
	OPEN_FILE,
	OPEN_RECENT,
	SAVE_FILE,
	SAVE_FILE_AS,
	EXPORT_AS,
	QUIT,
}
enum HelpMenu {
	SOURCE_CODE,
	REPORT_ISSUE,
	VIEW_LICENSE,
	ABOUT_PROGRAM,
}


var _vbox: VBoxContainer = null

var _menu_hbox: HBoxContainer = null
var _file_menu: MenuButton = null
var _edit_menu: MenuButton = null
var _view_menu: MenuButton = null
var _help_menu: MenuButton = null

var _database: Dictionary[StringName, Variant] = DB.NULL_DATABASE
var _database_path: String = \"\"
var _database_modified: bool = false

var _database_editor: DatabaseEditor = null
var _table_view: TableView = null

var _status_bar: Label = null

var _database_create_dialog: DatabaseCreateDialog = null
var _database_load_dialog: DatabaseLoadDialog = null
var _database_save_dialog: DatabaseSaveDialog = null
var _database_export_dialog: DatabaseExportDialog = null

var _about_program_dialog: AboutProgramDialog = null
var _quit_dialog: QuitDialog = null


func _init() -> void:
	_vbox = VBoxContainer.new()
	self.add_child(_vbox)

	_menu_hbox = HBoxContainer.new()
	_vbox.add_child(_menu_hbox)

	_file_menu = MenuButton.new()
	_file_menu.set_text(\"File\")
	_file_menu.set_switch_on_hover(true)
	_menu_hbox.add_child(_file_menu)

	var popup: PopupMenu = _file_menu.get_popup()
	popup.add_item(\"New File\", FileMenu.NEW_FILE, KEY_N + KEY_MASK_CTRL)
	popup.add_item(\"Open File\", FileMenu.OPEN_FILE, KEY_O + KEY_MASK_CTRL)

	popup.add_item(\"Open Recent\", FileMenu.OPEN_RECENT)
	popup.set_item_disabled(-1, true)

	popup.add_separator()
	popup.add_item(\"Save File\", FileMenu.SAVE_FILE, KEY_S + KEY_MASK_CTRL)
	popup.set_item_disabled(-1, true)
	popup.add_item(\"Save As…\", FileMenu.SAVE_FILE_AS, KEY_S + KEY_MASK_CTRL + KEY_MASK_SHIFT)
	popup.set_item_disabled(-1, true)
	popup.add_separator()
	popup.add_item(\"Export As…\", FileMenu.EXPORT_AS, KEY_E + KEY_MASK_CTRL)
	popup.set_item_disabled(-1, true)
	popup.add_separator()
	popup.add_item(\"Quit\", FileMenu.QUIT, KEY_Q + KEY_MASK_CTRL)
	popup.id_pressed.connect(_on_file_menu_option)

	_edit_menu = MenuButton.new()
	_edit_menu.set_text(\"Edit\")
	_edit_menu.set_disabled(true)
	_edit_menu.set_switch_on_hover(true)
	_menu_hbox.add_child(_edit_menu)

	_view_menu = MenuButton.new()
	_view_menu.set_text(\"View\")
	_view_menu.set_disabled(true)
	_view_menu.set_switch_on_hover(true)
	_menu_hbox.add_child(_view_menu)

	_help_menu = MenuButton.new()
	_help_menu.set_text(\"Help\")
	_help_menu.set_switch_on_hover(true)

	popup = _help_menu.get_popup()
	popup.add_item(\"Source Code\", HelpMenu.SOURCE_CODE)
	popup.add_item(\"Report Issue\", HelpMenu.REPORT_ISSUE)
	popup.add_item(\"View License\", HelpMenu.VIEW_LICENSE)
	popup.add_separator()
	popup.add_item(\"About\", HelpMenu.ABOUT_PROGRAM)
	popup.id_pressed.connect(_on_help_menu_option)

	_menu_hbox.add_child(_help_menu)

	_database_editor = DatabaseEditor.new()
	_database_editor.set_v_size_flags(Control.SIZE_EXPAND_FILL)
	_database_editor.database_modified.connect(_on_database_modified)
	_vbox.add_child(_database_editor)

	_table_view = _database_editor.get_table_view()
	_table_view.multiple_rows_selected.connect(_on_table_view_multiple_rows_selected)
	_table_view.connect(&\"table_changed\", _on_table_view_changed)

	_status_bar = Label.new()
	_status_bar.set_theme_type_variation(&\"StatusBar\")
	_status_bar.set_vertical_alignment(VERTICAL_ALIGNMENT_CENTER)
	_vbox.add_child(_status_bar)

	self.database_saved.connect(_on_database_saved)

	self.database_changed.connect(_database_editor.set_database)
	self.database_changed.connect(_on_database_changed)


func _enter_tree() -> void:
	get_tree().set_auto_accept_quit(false)

	var window: Window = get_tree().get_root()
	window.set_min_size(Vector2i(540, 380))
	window.close_requested.connect(quit)


func set_database(database: Dictionary[StringName, Variant]) -> void:
	if is_same(_database, database):
		return

	_database = database
	database_changed.emit(database)

func get_database() -> Dictionary[StringName, Variant]:
	return _database

func get_database_id() -> StringName:
	return DB.database_get_id(_database)


func show_database_dialog_create() -> void:
	if is_instance_valid(_database_create_dialog):
		_database_create_dialog.queue_free()

	_database_create_dialog = DatabaseCreateDialog.new()
	_database_create_dialog.database_created.connect(func on_database_created(database: Dictionary) -> void:
		_database_path = \"\"
		_database_modified = true

		set_database(database)
	)
	self.add_child(_database_create_dialog)

	_database_create_dialog.popup_centered(Vector2i(300, 50))


func show_open_file_dialog() -> void:
	if is_instance_valid(_database_load_dialog):
		_database_load_dialog.queue_free()

	_database_load_dialog = DatabaseLoadDialog.new(_database)
	_database_load_dialog.database_loaded.connect(func on_database_loaded(database: Dictionary, path: String) -> void:
		_database_path = path
		_database_modified = false

		set_database(database)
	)
	self.add_child(_database_load_dialog)

	_database_load_dialog.popup_centered_clamped(Vector2i(640, 360))


func show_database_save_dialog() -> void:
	if is_instance_valid(_database_save_dialog):
		_database_save_dialog.queue_free()

	_database_save_dialog = DatabaseSaveDialog.new(_database)
	_database_save_dialog.file_saved.connect(func on_file_saved(path: String) -> void:
		_database_path = path

		database_saved.emit()
		update_window_title()
	)

	self.add_child(_database_save_dialog)

	_database_save_dialog.popup_centered_clamped(Vector2i(640, 360))


func show_database_export_dialog() -> void:
	if is_instance_valid(_database_export_dialog):
		_database_export_dialog.queue_free()

	_database_export_dialog = DatabaseExportDialog.new(_database)
	self.add_child(_database_export_dialog)

	_database_export_dialog.popup_centered_clamped(Vector2i(640, 360))


func save_file() -> void:
	if _database_path.is_empty():
		show_database_save_dialog()
	else:
		var error: Error = DatabaseSaver.save_database(_database, _database_path)
		if error:
			push_error(error_string(error))
		else:
			database_saved.emit()


func set_status(status: String) -> void:
	_status_bar.set_text(status)


func show_quit_dialog() -> void:
	if is_instance_valid(_quit_dialog):
		_quit_dialog.queue_free()

	_quit_dialog = QuitDialog.new()
	_quit_dialog.save_requested.connect(func on_save() -> void:
		call_deferred(&\"save_file\")
		await database_saved

		get_tree().quit()
	)
	_quit_dialog.discard_requested.connect(get_tree().quit)
	_quit_dialog.cancel_requested.connect(_quit_dialog.queue_free)
	self.add_child(_quit_dialog)

	_quit_dialog.popup_centered(Vector2i(300, 50))

func quit() -> void:
	if _database_modified:
		show_quit_dialog()
	else:
		get_tree().quit()


func show_about_program_dialog() -> void:
	if is_instance_valid(_about_program_dialog):
		_about_program_dialog.queue_free()

	_about_program_dialog = AboutProgramDialog.new()
	self.add_child(_about_program_dialog)

	_about_program_dialog.popup_centered()


func _on_file_menu_option(option: FileMenu) -> void:
	match option:
		FileMenu.NEW_FILE:
			show_database_dialog_create()
		FileMenu.OPEN_FILE:
			show_open_file_dialog()
		FileMenu.OPEN_RECENT:
			pass
		FileMenu.SAVE_FILE:
			save_file()
		FileMenu.SAVE_FILE_AS:
			show_database_save_dialog()
		FileMenu.EXPORT_AS:
			show_database_export_dialog()
		FileMenu.QUIT:
			quit()


func _on_help_menu_option(option: HelpMenu) -> void:
	match option:
		HelpMenu.SOURCE_CODE:
			OS.shell_open(\"https://github.com/4d49/datoolina\")
		HelpMenu.REPORT_ISSUE:
			OS.shell_open(\"https://github.com/4d49/datoolina/issues\")
		HelpMenu.VIEW_LICENSE:
			OS.shell_open(\"https://github.com/4d49/datoolina/blob/master/LICENSE.md\")
		HelpMenu.ABOUT_PROGRAM:
			show_about_program_dialog()


func update_window_title() -> void:
	const WINDOW_TITLE: String = \"Datoolina\"

	var window := get_tree().get_root()

	if _database_modified:
		window.set_title(WINDOW_TITLE + \" - \" + get_database_id() + \"*\")
	else:
		window.set_title(WINDOW_TITLE + \" - \" + get_database_id())


func _on_database_saved() -> void:
	_database_modified = false
	update_window_title()


func _on_database_changed(database: Dictionary) -> void:
	var is_invalid: bool = database.is_empty() or database.is_read_only()

	if not is_invalid:
		update_window_title()

	var popup: PopupMenu = _file_menu.get_popup()
	popup.set_item_disabled(popup.get_item_index(FileMenu.SAVE_FILE), is_invalid)
	popup.set_item_disabled(popup.get_item_index(FileMenu.SAVE_FILE_AS), is_invalid)
	popup.set_item_disabled(popup.get_item_index(FileMenu.EXPORT_AS), is_invalid)


func _on_database_modified() -> void:
	if _database_modified:
		return

	_database_modified = true
	update_window_title()


func _update_status(row_count: int, visible_row_count: int, selected_row_count: int) -> void:
	var status: String = \"Records: %d\" % row_count

	if visible_row_count != row_count:
		status += \", %d visible\" % visible_row_count

	if selected_row_count:
		status += \", %d selected\" % selected_row_count

	set_status(status)

func _on_table_view_multiple_rows_selected(selected_rows: PackedInt32Array) -> void:
	_update_status(_table_view.get_row_count(), _table_view.get_visible_rows_count(), selected_rows.size())

func _on_table_view_changed() -> void:
	_update_status(_table_view.get_row_count(), _table_view.get_visible_rows_count(), _table_view.get_selected_rows_count())
"

[node name="Control" type="PanelContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = SubResource("GDScript_xjt66")
